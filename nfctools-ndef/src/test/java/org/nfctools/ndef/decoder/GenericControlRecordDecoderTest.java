/**
 * Copyright 2011-2012 Adrian Stabiszewski, as@nfctools.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nfctools.ndef.decoder;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;
import org.nfctools.ndef.NdefContext;
import org.nfctools.ndef.NdefMessageDecoder;
import org.nfctools.ndef.encoder.GenericControlRecordEncoderTest;
import org.nfctools.ndef.wkt.records.GenericControlRecord;
import org.nfctools.ndef.wkt.records.TextRecord;
import org.nfctools.ndef.wkt.records.UriRecord;
import org.nfctools.utils.NfcUtils;

public class GenericControlRecordDecoderTest {

	private NdefMessageDecoder messageDecoder = NdefContext.getNdefMessageDecoder();

	public static final byte[] specTable4 = { (byte)0xD1, 0x02, 0x4A, /* Gc at 3 : */ 0x47, 0x63, 0x00, (byte)0xD1, 0x01, 0x22, /* t at 9 : */ 0x74, (byte)0xD1, 0x01, 0x1E, /* U at 13 : */ 0x55, 0x1D, /* localhost/Appli/CustomerBonus at 15 : */ 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x2F, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x2F, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x65, 0x72, 0x42, 0x6F, 0x6E, 0x75, 0x73, (byte)0xD1, 0x01, 0x0E, /* a at 47 : */ 0x61, 0x00, (byte)0xD1, 0x01, 0x09, /* T at 52 : */ 0x54, 0x05, /* en-US at 54 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* add at 59 : */ 0x61, 0x64, 0x64, (byte)0xD1, 0x01, 0x0D, /* d at 65 : */ 0x64, (byte)0xD1, 0x01, 0x09, /* T at 69 : */ 0x54, 0x05, /* en-US at 71 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* 500 at 76 : */ 0x35, 0x30, 0x30}; 

	public static final byte[] specTable5 = { (byte)0xD1, 0x02, 0x54, /* Gc at 3 : */ 0x47, 0x63, 0x00, (byte)0xD1, 0x01, 0x19, /* t at 9 : */ 0x74, (byte)0xD1, 0x01, 0x15, /* T at 13 : */ 0x54, 0x05, /* en-US at 15 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* PropertyManager at 20 : */ 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, (byte)0xD1, 0x01, 0x0E, /* a at 38 : */ 0x61, 0x00, (byte)0xD1, 0x01, 0x09, /* T at 43 : */ 0x54, 0x05, /* en-US at 45 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* Set at 50 : */ 0x53, 0x65, 0x74, (byte)0xD1, 0x01, 0x20, /* d at 56 : */ 0x64, (byte)0xD1, 0x01, 0x10, /* T at 60 : */ 0x54, 0x05, /* en-US at 62 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* SilentMode at 67 : */ 0x53, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x4D, 0x6F, 0x64, 0x65, (byte)0xD1, 0x01, 0x08, /* T at 80 : */ 0x54, 0x05, /* en-US at 82 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* ON at 87 : */ 0x4F, 0x4E}; // 89

	public static final byte[] specTable6 = { (byte)0xD1, 0x02, 0x55, /* Gc at 3 : */ 0x47, 0x63, 0x06, (byte)0xD1, 0x01, 0x19, /* t at 9 : */ 0x74, (byte)0xD1, 0x01, 0x15, /* T at 13 : */ 0x54, 0x05, /* en-US at 15 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* PropertyManager at 20 : */ 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x72, (byte)0xD1, 0x01, 0x0E, /* a at 38 : */ 0x61, 0x00, (byte)0xD1, 0x01, 0x09, /* T at 43 : */ 0x54, 0x05, /* en-US at 45 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* Set at 50 : */ 0x53, 0x65, 0x74, (byte)0xD1, 0x01, 0x21, /* d at 56 : */ 0x64, (byte)0xD1, 0x01, 0x10, /* T at 60 : */ 0x54, 0x05, /* en-US at 62 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* SilentMode at 67 : */ 0x53, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x4D, 0x6F, 0x64, 0x65, (byte)0xD1, 0x01, 0x09, /* T at 80 : */ 0x54, 0x05, /* en-US at 82 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* OFF at 87 : */ 0x4F, 0x46, 0x46, (byte)0xD1, 0x02, 0x54, /* Gc at 93 : */ 0x47, 0x63, 0x00, (byte)0xD1, 0x01, 0x20, /* t at 99 : */ 0x74, (byte)0xD1, 0x01, 0x1C, /* U at 103 : */ 0x55, 0x1D, /* localhost/Appli/MusicPlayer at 105 : */ 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x2F, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x2F, 0x4D, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, (byte)0xD1, 0x01, 0x0F, /* a at 135 : */ 0x61, 0x00, (byte)0xD1, 0x01, 0x0A, /* T at 140 : */ 0x54, 0x05, /* en-US at 142 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* play at 147 : */ 0x70, 0x6C, 0x61, 0x79, (byte)0xD1, 0x01, 0x18, /* d at 154 : */ 0x64, (byte) 0xD1, 0x01, 0x14, /* U at 158 : */ 0x55, 0x03, /* nfc-forum.org/music at 160 : */ 0x6E, 0x66, 0x63, 0x2D, 0x66, 0x6F, 0x72, 0x75, 0x6D, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x6D, 0x75, 0x73, 0x69, 0x63}; // 179

	public static final byte[] specTable7 = { (byte)0xD1, 0x02, 0x31, /* Gc at 3 : */ 0x47, 0x63, 0x00, (byte)0xD1, 0x01, 0x11, /* t at 9 : */ 0x74, (byte)0xD1, 0x01, 0x0D, /* U at 13 : */ 0x55, 0x1D, /* localhost/TA at 15 : */ 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x2F, 0x54, 0x41, (byte)0xD1, 0x01, 0x02, /* a at 30 : */ 0x61, 0x01, 0x00, (byte)0xD1, 0x01, 0x11, /* d at 36 : */ 0x64, (byte)0xD1, 0x01, 0x0D, /* T at 40 : */ 0x54, 0x05, /* en-US at 42 : */ 0x65, 0x6E, 0x2D, 0x55, 0x53, /* +CVIB=1 at 47 : */ 0x2B, 0x43, 0x56, 0x49, 0x42, 0x3D, 0x31}; // 54;

	
	@Test
	public void testDecodeGenericControlRecordFromSpecTable4() throws Exception {
		GenericControlRecord gcr = messageDecoder.decodeToRecord(specTable4);

		assertTrue(gcr.getTarget().getTargetIdentifier() instanceof UriRecord);

		UriRecord uriRecord = (UriRecord)gcr.getTarget().getTargetIdentifier();
		assertEquals("file://localhost/Appli/CustomerBonus", uriRecord.getUri());

		assertNotNull(gcr.getAction());
		assertTrue(gcr.getAction().hasActionRecord());
		assertTrue(gcr.getAction().getActionRecord() instanceof TextRecord);

		TextRecord actionTextRecord = (TextRecord)gcr.getAction().getActionRecord();

		assertEquals("add", actionTextRecord.getText());

		assertEquals(1, gcr.getData().getRecords().size());
	}

	@Test
	public void testDecodeGenericControlRecordFromSpecTable5() throws Exception {
		GenericControlRecord gcr = messageDecoder.decodeToRecord(specTable5);
	}

	@Test
	public void testDecodeGenericControlRecordFromSpecTable6() throws Exception {
		GenericControlRecord gcr = messageDecoder.decodeToRecord(specTable6);
	}

	@Test
	public void testDecodeGenericControlRecordFromSpecTable7() throws Exception {
		GenericControlRecord gcr = messageDecoder.decodeToRecord(specTable7);
	}

	@Test
	public void testDecode() throws Exception {
		GenericControlRecord gcr = messageDecoder.decodeToRecord(NfcUtils
				.convertASCIIToBin(GenericControlRecordEncoderTest.encodedNdefSimple));
		assertNotNull(gcr);
	}

}
